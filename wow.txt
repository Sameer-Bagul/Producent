HTML 
<div class="link-app-container">
        
                    <form id="linkForm">
                        <input type="text" id="name" placeholder="Site name " required>
                        <input type="url" id="link" placeholder="Paste Your Link" required>
                        <input type="text" id="tag" placeholder="#Tag">
                        <button type="submit">Save</button>
                        
                        <input type="text" id="search" placeholder="Search links...">
                    </form>
                        
                    
                        
                    <div id="linkList">
                        <!-- <h2>Saved Links</h2> -->
                        <ul id="list"></ul>
                    </div>
            
                </div>


CSS

:root {
    --background-color: #2b2b2b;    
    --text-color: #ffffff;
    --link-color: #ff00b7;
    --main-color: #ff4500;
    --icon-color: #000000;

    --blur-10: blur(10px);
    --border-radius-20: 20px;
    --grid-item-glass-bg: rgba(17, 32, 60, 0.25);
    --glass-border-color: rgba(255, 255, 255, 0.125);
    --glass-border: 1px solid rgba(255, 255, 255, 0.125);
    
}

/* Light theme overrides */
.light-theme {
    --background-color: #f0f0f0;
    --text-color: #000000;
    --link-color: #ff00b7;
    --main-color: #ff4500;
    --icon-color: #ffffff;

    --grid-item-glass-bg: rgba(255, 255, 255, 0.25);
    --glass-border-color: rgba(209, 213, 219, 0.3);
    --glass-border: 1px solid var(--glass-border-color);
}

/* Fonts */
@import url('https://fonts.googleapis.com/css?family=Poppins:100,200,300,400,500,600,700,800,900');

/* General Styling */
* {
    padding: 0;
    margin: 0;
    font-family: 'Poppins', sans-serif;
    box-sizing: border-box;
    color: var(--text-color);
    list-style: none;
    text-decoration: none;
}

/* Body styling */
body {
    background-color: var(--background-color);
    color: var(--text-color);
    overflow: hidden;
    display: flex;
    flex-direction: column;
    align-items: center;
    height: 100vh;
    margin: 0;
    padding: 0;

    background-image: url(./assets/12.jpg);
    background-size: cover;
    background-repeat: no-repeat;
    background-position: center center;

    /* backdrop-filter:; */
    
}

/* Container styling */
.link-app-container {
    width: 100%;
    padding: 20px;
    text-align: center;
    height: 100vh;
    background: #000000a1;
}

/* Header styling for the form */
#linkForm {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr auto 1fr;
    gap: 10px;
    margin-bottom: 20px;
    width: 100%;
    padding: 20px;
    border: var(--glass-border);
    background-color: transparent;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    border-radius: var(--border-radius-20);
    box-sizing: border-box;
}

#linkForm * {
    height: 40px;
    border-radius: var(--border-radius-20);
    border: none;
    padding: 10px;
    font-size: 1rem;
}
/* 
#linkForm input#name {
    grid-column: 1 / 2;
}

#linkForm input#link {
    grid-column: 2 / 3;
}

#linkForm input#tag {
    grid-column: 3 / 4;
} */

#linkForm button {
    background-color: var(--main-color);
    color: var(--text-color);
    cursor: pointer;
    transition: background-color 0.3s;
    grid-column: 4 / 5;
}

#linkForm button:hover {
    background-color: white;
    color: var(--main-color);
}

/* Search input styling */
#search {
    padding: 10px;
    border-radius: var(--border-radius-20);
    border: var(--glass-border);
    /* font-size: 1rem; */
    /* margin-bottom: 20px; */
    /* width: calc(100% - 40px); */
    /* box-sizing: border-box; */
}

input {
    background: var(--grid-item-glass-bg);
    border: var(--glass-border-color);
    
    
}
input::placeholder{
    color: var(--text-color);
}


#search:focus {
    outline: none;
    border-color: var(--main-color);
    border: var(--glass-border-color);
}

/* List styling */
#linkList {
    text-align: left;
    width: 100%;
}

#linkList h2 {
    margin-bottom: 10px;
    font-size: 1.5rem;
    color: var(--main-color);
}

ul {
    list-style-type: none;
    padding: 0;
    margin: 0;

    display: grid;
    grid-template-columns: repeat(4, 1fr);
}

ul li {
    background: var(--grid-item-glass-bg);
    padding: 10px;
    border-radius: var(--border-radius-20);
    margin-bottom: 10px;
    display: flex;
    align-items: center;
    transition: background 0.3s;
    border: var(--glass-border);
}

ul li .preview{
    display: flex;
    width: 100%;
    justify-content: space-around;
    align-items: center;
}

ul li span {
    display: flex;
    flex-direction: column;
    max-width: 75%;
}

ul li span .name {
    font-weight: bold;
    word-wrap: break-word;
}

ul li span .tag {
    font-size: 0.875rem;
    color: #777;
}

ul li .delete-button {
    /* todo */
}

ul li .delete-button:hover {
    /* todo */
}

/* Image styling */
ul li img {
    max-width: 40px;
    max-height: 40px;
    margin-left: 10px;
    border-radius: var(--border-radius-20);
}


/* General Styling */
@media screen and (max-width: 768px) {
    .link-app-container {
        padding: 10px;
    }

    #linkForm {
        grid-template-columns: 1fr;
    }

    ul {
        grid-template-columns: 1fr;
    }
}

@media screen and (max-width: 480px) {
    /* Adjustments for smaller screens */
    #linkForm * {
        font-size: 0.9rem;
    }
    
    ul li {
        padding: 15px;
    }

    ul li img {
        max-width: 30px;
        max-height: 30px;
    }
}



JS 

document.addEventListener('DOMContentLoaded', () => {
    loadLinks();
    addEventListeners();
});

function addEventListeners() {
    document.getElementById('linkForm').addEventListener('submit', handleFormSubmit);
    document.getElementById('search').addEventListener('input', handleSearchInput);
    const list = document.getElementById('list');
    list.addEventListener('dragover', handleDragOver);
}

async function handleFormSubmit(event) {
    event.preventDefault();
    const name = document.getElementById('name').value;
    const link = document.getElementById('link').value;
    const tag = document.getElementById('tag').value;

    try {
        const preview = await fetchLinkPreview(link);
        const linkObj = { name, link, tag, preview };
        saveLink(linkObj);
        displayLink(linkObj);
    } 
    catch (error) {
        console.error('Error fetching link preview:', error);
        alert('Failed to fetch link preview. Please try again.');
    }

    document.getElementById('linkForm').reset();
}

function handleSearchInput(event) {
    const query = event.target.value.toLowerCase();
    const items = document.querySelectorAll('#list li');
    items.forEach(item => {
        const name = item.querySelector('.name').textContent.toLowerCase();
        const tag = item.querySelector('.tags').textContent.toLowerCase();
        item.style.display = (name.includes(query) || tag.includes(query)) ? 'flex' : 'none';
    });
}

async function fetchLinkPreview(url) {
    try {
        const response = await fetch(`https://api.linkpreview.net/?key=04864a2d41811b0041cd14d1df6f1774&q=${url}`);
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = await response.json();
        return data.image || '';
    } catch (error) {
        console.error('Error fetching link preview:', error);
        return '';
    }
}

function saveLink(linkObj) {
    let links = JSON.parse(localStorage.getItem('links')) || [];
    links.push(linkObj);
    localStorage.setItem('links', JSON.stringify(links));
}

function loadLinks() {
    let links = JSON.parse(localStorage.getItem('links')) || [];
    links.forEach(displayLink);
}

function displayLink(linkObj) {
    const listItem = document.createElement('li');
    listItem.innerHTML = `
        <div class="preview">
            <img src="${linkObj.preview}" alt="Preview Image" onerror="this.style.display='none'">
            <a class="name" href="${linkObj.link}" target="_blank">${linkObj.name}</a>
            <span class="tags"># ${linkObj.tag}</span>
            <span class="edit"><i class="fa-solid fa-file-pen"></i></span>
            <span class="delete"><i class="fa-solid fa-trash"></i></span>
            <span class="share"><i class="fa-solid fa-share-nodes"></i></span>
        </div>
    `;
    listItem.draggable = true;
    document.getElementById('list').appendChild(listItem);

    listItem.querySelector('.share').addEventListener('click', () => handleShare(linkObj.link));
    listItem.querySelector('.edit').addEventListener('click', () => editLink(linkObj, listItem));
    listItem.querySelector('.delete').addEventListener('click', () => deleteLink(linkObj, listItem));
    listItem.addEventListener('dragstart', () => listItem.classList.add('dragging'));
    listItem.addEventListener('dragend', () => listItem.classList.remove('dragging'));
}

function handleShare(link) {
    navigator.clipboard.writeText(link).then(
        () => alert('Link copied to clipboard!'),
        () => alert('Failed to copy link')
    );
}

function editLink(linkObj, listItem) {
    const newName = prompt('Edit Name', linkObj.name);
    const newLink = prompt('Edit Link', linkObj.link);
    const newTag = prompt('Edit Tag', linkObj.tag);

    if (newName && newLink) {
        linkObj.name = newName;
        linkObj.link = newLink;
        linkObj.tag = newTag;

        listItem.querySelector('.name').textContent = newName;
        listItem.querySelector('a').href = newLink;
        listItem.querySelector('.tags').textContent = newTag;

        saveAllLinks();
    }
}

function deleteLink(linkObj, listItem) {
    let links = JSON.parse(localStorage.getItem('links')) || [];
    links = links.filter(link => link.link !== linkObj.link);
    localStorage.setItem('links', JSON.stringify(links));
    listItem.remove();
}

function saveAllLinks() {
    const items = document.querySelectorAll('#list li');
    let links = [];
    items.forEach(item => {
        const name = item.querySelector('.name').textContent;
        const link = item.querySelector('a').href;
        const tag = item.querySelector('.tags').textContent;
        const preview = item.querySelector('.preview img').src;
        links.push({ name, link, tag, preview });
    });
    localStorage.setItem('links', JSON.stringify(links));
}

function handleDragOver(event) {
    event.preventDefault();
    const list = document.getElementById('list');
    const draggingItem = document.querySelector('.dragging');
    const afterElement = getDragAfterElement(list, event.clientY);
    if (afterElement == null) {
        list.appendChild(draggingItem);
    } else {
        list.insertBefore(draggingItem, afterElement);
    }
    saveAllLinks();
}

function getDragAfterElement(list, y) {
    const listItems = [...list.querySelectorAll('li:not(.dragging)')];

    return listItems.reduce((closest, child) => {
        const box = child.getBoundingClientRect();
        const offset = y - box.top - box.height / 2;
        if (offset < 0 && offset > closest.offset) {
            return { offset: offset, element: child };
        } else {
            return closest;
        }
    }, { offset: Number.NEGATIVE_INFINITY }).element;
}
